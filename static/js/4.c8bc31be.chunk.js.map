{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Picture/Picture.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/hoc/withAuthRedirect.jsx","redux/selectors/dialogs-selectors.js","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","className","classes","dialog","activeClassName","active","to","id","src","smile","dialogPicture","alt","name","Picture","fromMe","profilePhoto","picture","Message","cn","message","right","text","textRight","maxLength15","maxLengthCreator","Textarea","createFormElement","DialogsForm","onSubmit","formData","sendMessage","newMessageText","typeMessage","event","handleSubmit","form","reset","onSubmitReset","component","validate","composeValidators","requiredField","placeholder","Dialogs","messagesElements","messages","map","dialogsElements","dialogs","element","messagesContainer","useRef","useEffect","current","scrollTop","scrollHeight","dialogsItems","sticky","wrapper","ref","mapStateToProps","state","isAuthorized","getIsAuthorized","withRedirect","Component","connect","getMessages","messagesPage","getDialogs","compose","getAuthorizedUserProfilePhoto"],"mappings":"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","file":"static/js/4.c8bc31be.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1XsCb\",\"dialog\":\"Dialogs_dialog__2rtrS\",\"active\":\"Dialogs_active__2-vgw\",\"dialogsItems\":\"Dialogs_dialogsItems__11DEe\",\"dialogPicture\":\"Dialogs_dialogPicture__2K2Xy\",\"sticky\":\"Dialogs_sticky__2GNnH\",\"wrapper\":\"Dialogs_wrapper__2hgZX\",\"message\":\"Dialogs_message__140US\",\"picture\":\"Dialogs_picture__3I4tq\",\"text\":\"Dialogs_text__riCsQ\",\"textRight\":\"Dialogs_textRight__1grCs\",\"right\":\"Dialogs_right__2RtI3\",\"typeMessage\":\"Dialogs_typeMessage__2h9vJ\",\"comment\":\"Dialogs_comment__1ZIfF\"};","import classes from './../Dialogs.module.css';\nimport { NavLink } from 'react-router-dom';\nimport smile from '../../../assets/images/smile.jpg';\n\n\nconst DialogItem = (props) => {\n    \n    return (\n        <NavLink className={classes.dialog} activeClassName={classes.active} to={\"/dialogs/\" + props.id}>\n            <img src={smile} className={classes.dialogPicture} alt=\"user\" />\n            {props.name}\n        </NavLink>\n    );\n};\n\nexport default DialogItem;","import classes from './../..//Dialogs.module.css';\nimport smile from '../../../../assets/images/smile.jpg';\n\nconst Picture = props => {\n        return (\n            <img src={props.fromMe ? props.profilePhoto: smile} className={classes.picture} alt=\"user\"/>\n        )\n};\n\nexport default Picture;","import classes from './../Dialogs.module.css';\nimport Picture from './Picture/Picture';\nimport cn from 'classnames';\n\nconst Message = props => {\n    if (!props.fromMe) {\n        return (\n            <div className={classes.message + \" \" + classes.right}>\n                <Picture fromMe={props.fromMe} />\n                <div className={classes.text + \" \" + classes.textRight}>\n                    {props.message}\n                </div>\n\n            </div>\n        );\n    }\n    else {\n        return (\n            <div className={ cn(classes.message, { [classes.right]: !props.fromMe } ) }>\n                <Picture fromMe={props.fromMe} profilePhoto={props.profilePhoto} />\n                <div className={ cn(classes.text, { [classes.textRight]: !props.fromMe } ) }>\n                    {props.message}\n                </div>\n            </div>\n        );\n    }\n\n\n};\n\nexport default Message;","import classes from './Dialogs.module.css';\nimport DialogItem from './DialogItem/DialogItem';\nimport Message from './Message/Message';\nimport React, { useEffect, useRef } from 'react';\nimport { Field, Form } from 'react-final-form';\nimport { Button, createFormElement } from '../сommon/FormControls/FormControls';\nimport { composeValidators, maxLengthCreator, requiredField } from '../../utils/validators/validators';\n\nconst maxLength15 = maxLengthCreator(15);\nconst Textarea = createFormElement(\"textarea\");\n\nconst Dialogs = props => {\n    let messagesElements = props.messages.map(message => <Message message={message.message} fromMe={message.fromMe} key={message.id} profilePhoto={props.profilePhoto} />);\n    let dialogsElements = props.dialogs.map(element => <DialogItem id={element.id} name={element.name} key={element.id} />);\n    let messagesContainer = useRef(null)\n\n    useEffect(() => {\n        messagesContainer.current.scrollTop = messagesContainer.current.scrollHeight;\n    }, [messagesElements, messagesContainer]);\n\n    return (\n        <div className={classes.dialogs}>\n            <div className={classes.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={classes.messages}>\n                <div className={classes.sticky}>\n                    <div className={classes.wrapper} ref={messagesContainer}>\n                        {messagesElements}\n                    </div>\n                    <DialogsForm sendMessage={props.sendMessage} />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nconst DialogsForm = props => {\n    const onSubmit = formData => {\n        props.sendMessage(formData.newMessageText);\n    };\n\n    const onSubmitReset = (event, handleSubmit, form) => {\n        handleSubmit(event);\n        form.reset();\n    }\n\n    return (\n        <Form onSubmit={onSubmit}>\n            {props => (\n                <form className={classes.typeMessage} onSubmit={event => onSubmitReset(event, props.handleSubmit, props.form)}>\n                    <Field component={Textarea} name={'newMessageText'} className={'comment'} validate={composeValidators(requiredField, maxLength15)} placeholder=\"Type your message here..\" />\n                    <Button text={'Send'} />\n                </form>\n            )}\n        </Form>\n    );\n\n\n\n};\n\nexport default Dialogs;","import { Redirect } from \"react-router-dom\";\nimport { connect } from 'react-redux';\nimport { getIsAuthorized } from \"../../redux/selectors/auth-selectors\";\n\nlet mapStateToProps = state => ({\n    isAuthorized: getIsAuthorized(state)\n});\n\nfunction withRedirect(Component) { //HOC\n    function RedirectComponent(props) {\n        if (!props.isAuthorized) return <Redirect to='/login' />\n\n        return <Component {...props} />\n    }\n\n    return connect(mapStateToProps)(RedirectComponent);\n}\n\nexport default withRedirect;","export const getMessages = state => {\n    return state.messagesPage.messages;\n};\n\nexport const getDialogs = state => {\n    return state.messagesPage.dialogs;\n};","import Dialogs from './Dialogs';\nimport { sendMessage } from '../../redux/dialogs-reducer';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport withRedirect from '../hoc/withAuthRedirect';\nimport { getDialogs, getMessages } from '../../redux/selectors/dialogs-selectors';\nimport { getAuthorizedUserProfilePhoto } from '../../redux/selectors/auth-selectors';\n\nconst mapStateToProps = state => {\n    return {\n        messages: getMessages(state),\n        dialogs: getDialogs(state),\n        profilePhoto: getAuthorizedUserProfilePhoto(state)\n    }\n};\n\nexport default compose(\n    connect(mapStateToProps, { sendMessage }),\n    withRedirect\n)(Dialogs);"],"sourceRoot":""}